[
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code."
  },
  {
    "objectID": "posts/LLM/index.html",
    "href": "posts/LLM/index.html",
    "title": "Large Language Models",
    "section": "",
    "text": "In his article “Large Language Models in Molecular Biology,” Serafim Batzoglou discusses recent advancements in deep learning-based language models and their potential to significantly impact the field of molecular biology. The convergence of LLMs with large-scale genomic and population health data is expected to propel the understanding and modeling of biomolecular systems with a level of accuracy that surpasses human capacity.\n\nLarge Language Models (LLMs):\nLLMs are advanced neural networks capable of generating text that resembles human language. They’re trained with vast amounts of data and learn to predict subsequent words in a sentence based on preceding words, allowing them to understand patterns, relationships, and context within the text.\n\n\nThe Genetic Dogma:\n\nThe central dogma of molecular biology describes the unidirectional flow of genetic information from DNA to RNA to protein. Within the DNA, there are approximately 20,000 genes responsible for synthesizing proteins, which play crucial roles in various biological processes: acting as structural components, enzymes, and facilitating communication within cells.\nThe process of protein synthesis includes transcription, splicing, and translation. Transcription produces messenger RNA (mRNA) by copying a DNA segment, which is then spliced to remove introns and retain exons, forming mature mRNA. Translation decodes the mRNA sequence into amino acids, which are linked to form proteins.\nGene regulation, mediated by transcription factors and other proteins, ensures the timely and appropriate expression of genes within cells. Chromatin structure, consisting of DNA wrapped around histone proteins, plays a role in gene accessibility and regulation; and histone modifications and DNA methylation influence gene expression by changing chromatin structure.\n\n\nGenetic Variation:\nAn individuals’ DNA and environmental influences shapes their biology throughout their lifetime. While humans share over 99.9% identical DNA, our DNA variants account for the heritability of traits, including contributions to health and disease.\nDNA variants are introduced through mutations in the DNA inherited from parents. Most variants are benign, while some may be deleterious or beneficial. Deleterious variants tend to be statistically eliminated from the population over time through natural selection. Essential genes are conserved with little to no mutation across generations due to their crucial role in fitness. Conversely, less significant genes are prone to more mutations as they have minimal fitness consequences and can be passed down without significant impact.\nAdvancements in DNA sequencing technologies have made data collection rapid and cost-effective. Sequencing-based methods can measure various molecular functions, such as gene expression and chromatin structure. Other technologies like mass spectrometry and X-ray crystallography provide insights into protein levels and structures.\nGenome-wide association studies (GWAS) correlate genetic variants with specific phenotypes, providing valuable insights into gene functions and disease mechanisms. However, large language models (LLMs) are expected to surpass traditional association analyses in linking genetic variation to function. The combination of DNA sequencing technologies, data generation capabilities, and LLMs holds promise in advancing our understanding of genetic variation and its impact on molecular mechanisms and human physiology.\n\n\nProminent Language Models in Molecular Biology:\nIn recent years, significant progress has been made in modeling the central dogma of molecular biology, offering insights into gene function and expression. While fully transforming molecular biology into a computational science or engineering human health is still a work in progress, the current momentum suggests that it’s achievable with more data and development. For example, language models like LLMs excel at learning intricate statistical properties of complex sequential data.\nBreakthroughs in different stages of the central dogma exemplify this progress. Methods like SpliceAI accurately predict gene structure by identifying splicing sites, aiding in genetic disease diagnosis. Advances in protein structure prediction, particularly with AlphaFold, have come close to solving the protein folding problem, revolutionizing biological research and drug discovery. Tools like PrimateAI-3D help annotate genetic variants as benign or pathogenic, contributing to disease diagnosis and drug target identification. Language models such as Enformer show promise in predicting gene expression from DNA sequences alone, shedding light on gene regulation. Foundation models like scGPT and Nucleotide Transformer, trained on extensive data, provide valuable insights into single-cell biology and raw DNA sequences, facilitating various downstream applications.\n\nOverall, the progress in modeling the central dogma of molecular biology demonstrates the potential of AI and deep learning in understanding gene function, expression, and regulation. Continued advancements and integration of diverse data sources will enhance our understanding of molecular biology and its impact on medicine and human health.\n\n\nLooking Forward\nThe availability of rich and affordable data is a significant driver of progress in this field. Advances in DNA sequencing technology have significantly reduced the cost of genome sequencing and other molecular assays, enabling comprehensive profiling of gene expression, chromatin structure, and other molecular layers. Initiatives like the UK Biobank and All Of Us project have collected extensive genetic and health data from large cohorts of participants, offering a wealth of information for research purposes. Cancer-focused companies, such as Tempus and Foundation Medicine, are also building vast genomic databases with clinical information.\nWhile developing these technologies, privacy concerns and the role of LLMs in clinical practice must be addressed. Proper informed consent and privacy measures are essential when training LLMs with participant data. LLMs should be seen as tools to assist healthcare professionals rather than replace them. Patient trust and verification remain crucial aspects of their application in clinical settings.\nLLMs are well-suited to integrate and analyze these diverse datasets. Through autoregressive or masked language modeling, these models can learn from single-cell datasets, functional genomics data, and clinical records to understand gene pathways, genomic variants, and their associations with human health. However, the challenge lies in technical innovations to represent and integrate different layers of information and scale up the model’s processing capacity.\nSuch an advanced LLM could have various applications, including clinical diagnosis, drug development, and advancing our understanding of molecular biology. It could aid doctors in making precise diagnoses, identify potential drug targets, and assist in personalized medicine. Additionally, the model could offer suggestions for additional experiments and contribute to filling gaps in data.\n\n\nConclusion\nMolecular biology’s transition into a computational science is facilitated by the combination of extensive data acquisition and powerful models like LLMs. In the coming years, these models will enable accurate predictions of the complex biomolecular interactions that connect our DNA, cellular biology, and overall health. This advancement is expected to have a profound impact on various aspects of medicine. Additionally, the development of open foundation models that integrate genomic and medical data will drive research, innovation, and facilitate the practice of precision medicine."
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/python-basics/index.html",
    "href": "posts/python-basics/index.html",
    "title": "Python Basics",
    "section": "",
    "text": "Type\nName\nDescription\nExamples\n\n\n\n\nInteger\nint\nall integers\n-2, -1, 0, 1, 2\n\n\nFloat\nfloat\nall decimals\n1.0, 2.5, 4.987\n\n\nString\nstr\nsequence of characters\n“any text enclosed in single or double quotes, includes spaces and special characters”\n\n\nBoolean\nbool\nexpression that is True or False\nTrue, False, 2==2 (is read as True), 2==1 (is read as False)\n\n\n\nName variables using “camel case” format. Single word variable names should be all lowercase and multi-word names should have all but the first word capitalized capitalize every word after the first and have the rest as lowercase it’s best for variable names to be short but clear so you know what it’s referring to (This is not required but is good practice) example: word, twoWords, varNameExample, variable can contain numbers but cannot start with them Important: variables cannot be named special words that are already define in python, such as any datatype or built-in python function. Python will get confused because the variable name and function name and will give you an error. restricted variable names: int, float, str, bool, if, else, for, while, in, list, dict, def, class"
  },
  {
    "objectID": "posts/python-basics/index.html#operations",
    "href": "posts/python-basics/index.html#operations",
    "title": "Python Basics",
    "section": "Operations:",
    "text": "Operations:\nPython can compute simple calculations with operators\n\n\n\nCharacter\nOperation\nExample\n\n\n\n\n+\naddition\n1 + 2 -&gt; 3\n\n\n-\nsubtraction\n10 - 5 -&gt; 5\n\n\n*\nmultiplication\n3 * 4 -&gt; 12\n\n\n/\ndivision\n15 / 3 -&gt; 5\n\n\n**\npower\n4 ** 2 -&gt; 16\n\n\n//\nfloor division\n7 // 2 -&gt; 3\n\n\n\n(There don’t need to be spaces between the numbers and operations, it’s up to you)"
  },
  {
    "objectID": "posts/python-basics/index.html#user-input",
    "href": "posts/python-basics/index.html#user-input",
    "title": "Python Basics",
    "section": "User Input",
    "text": "User Input\nIf you want to interact with the user of your code, use the input() command\n# General Format: \nuserInput = input(\"message\")\nRunnning this line of code will prompt the user to enter a response based on what you write in the “message.” Their response will then get assigned to your variable, in this case userInput\n# Example\nuserName = input(\"What's your name? \")"
  },
  {
    "objectID": "posts/python-basics/index.html#common-functions",
    "href": "posts/python-basics/index.html#common-functions",
    "title": "Python Basics",
    "section": "Common Functions",
    "text": "Common Functions\nprint(\"text\") # prints out what you write in \"text\"\nlen() # returns the length of a string, list, tuple, or dictionary"
  },
  {
    "objectID": "posts/python-basics/index.html#lists",
    "href": "posts/python-basics/index.html#lists",
    "title": "Python Basics",
    "section": "Lists",
    "text": "Lists\nMaking a list: Lists can be made up of any datatype you can initialize your list with or without elements\n# Empty list\nmyList = []\n\n# List with elements\nnumList = [1, 2, 3, 4, 5]\ncolorList = ['red', 'yellow', 'green', 'blue', 'pink']\nAccessing list values by index: Python numbers each element in order, but it starts from 0\n\n\n\nIndex\n0\n1\n2\n3\n4\n\n\n\n\nnumList\n1\n2\n3\n4\n5\n\n\ncolorList\n‘red’\n‘yellow’\n‘green’\n‘blue’\n‘pink’\n\n\n\n\nthis can get confusing so just keep the 0 index in mind when coding.\n# Accessing elements by index\nlistName[index] # returns the element at the index given\n\n# examples\ncolorList[0] # returns 'red'\ncolorList[4] # returns 'pink'\ncolorList[5] # returns an error because there isn't an index of 5\nThere’s a bunch of other more specific things you can do with lists but you can just look those up as you need while you code"
  },
  {
    "objectID": "posts/python-basics/index.html#if-else-statements",
    "href": "posts/python-basics/index.html#if-else-statements",
    "title": "Python Basics",
    "section": "If Else Statements",
    "text": "If Else Statements\nif condition:\n    # do something\nelse:\n    # do another thing\nyou can also add more possible conditions with elif\nif condition:\n    # do something\nelif other_condition:\n    # do something else\nelif other_condition:\n    # do something else \nelse:\n    # do another thing"
  },
  {
    "objectID": "posts/python-basics/index.html#for-and-while-loops",
    "href": "posts/python-basics/index.html#for-and-while-loops",
    "title": "Python Basics",
    "section": "For and While Loops",
    "text": "For and While Loops\nfor i in range(5):\n    # do something 5 times, \n    # i starts at 0 and ends at 4, increasing by 1 each time\ncolors = ['red', 'yellow', 'green', 'blue', 'pink']\nfor x in numList:\n        # do something with x\n        # x will start at the first index and end at the last index, \n        # going up one index each time\nWhile loops continue until the condition given to them is False\nwhile condition:\n    # do something\n    # something happens that changes the condition to become False\nbe careful not to make an infinite loop. There must always be something in the loop that changes the condition to eventually become False"
  },
  {
    "objectID": "posts/python-basics/index.html#making-functions",
    "href": "posts/python-basics/index.html#making-functions",
    "title": "Python Basics",
    "section": "Making Functions",
    "text": "Making Functions\ndef functionName(parameter):\n        # do something\n        return result\nNote: there doesn’t always have to be a parameter and there doesn’t always have to be a result"
  },
  {
    "objectID": "posts/python-basics/index.html#object-oriented-programming",
    "href": "posts/python-basics/index.html#object-oriented-programming",
    "title": "Python Basics",
    "section": "Object Oriented Programming:",
    "text": "Object Oriented Programming:\nGeneral format:\n# Creating a class\n\nclass ClassName:\n    def __init__(self, parameters):\n        # Constructor\n             self.parameters = parameters   # setting up the variables in the object\n\n    def methodName(self, parameters):\n        # Method\n        return result\n\n# Creating an instance of the class (this is the object)\nobject = ClassName(parameters)\n\n# Calling methods on object\nobject.methodName(parameters)\nself will always be a parameter in all the functions when creating a class because it needs a way of knowing how to refer to itself. however, self does not appear as a parameter outside of creating the class (I think because it’s implied? idk don’t worry about it), so when you create the object and call methods on it, you don’t use self in the parameters.\nExample:\nclass Car:\n    def __init__(self, brand, color):\n        self.brand = brand\n        self.color = color\n      \n    def changeColor(self, newColor)\n        self.color = newColor\n\n    def startEngine(self):\n        print(\"Engine started for\", self.brand)\n\n# Creating objects of the Car class\ncar1 = Car(\"Toyota\", \"Red\")\ncar2 = Car(\"Honda\", \"Blue\")\n\n\n# Accessing attributes of objects\nprint(car1.brand)  # Output: \"Toyota\"\nprint(car1.color)  # Output: \"Red\"\n\nprint(car2.brand)  # Output: \"Honda\"\nprint(car2.color)  # Output: \"Blue\"\n\n# Calling methods on objects\ncar1.changeColor()\ncar1.start_engine()  # Output: Engine started for Toyota\ncar2.start_engine()  # Output: Engine started for Honda"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Laura’s Blog",
    "section": "",
    "text": "population structure\n\n\n\n\n\n\n\n\n\n\n\n\nJun 13, 2023\n\n\nLaura Vairus\n\n\n\n\n\n\n  \n\n\n\n\nPython Basics\n\n\n\n\n\n\n\ncode\n\n\ntraining\n\n\ntutorial\n\n\ncheatsheet\n\n\n\n\nBasic information and commands for python\n\n\n\n\n\n\nJun 8, 2023\n\n\nLaura Vairus\n\n\n\n\n\n\n  \n\n\n\n\nPost With Code\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nJun 6, 2023\n\n\nHarlow Malloc\n\n\n\n\n\n\n  \n\n\n\n\nLarge Language Models\n\n\n\n\n\nSummary of LLM article by Serafim Batzoglou\n\n\n\n\n\n\nJun 6, 2023\n\n\nLaura Vairus\n\n\n\n\n\n\n  \n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nJun 3, 2023\n\n\nTristan O’Malley\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/2023-06-13-population-structure/index.html",
    "href": "posts/2023-06-13-population-structure/index.html",
    "title": "population structure",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(devtools)\n\nLoading required package: usethis\n\nlibrary(glue)\n\n\nif(!file.exists(glue(\"~/Downloads/analysis_population_structure.tgz\")))\n{\n  system(glue(\"wget -O ~/Downloads/analysis_population_structure.tgz https://uchicago.box.com/shared/static/zv1jyevq01mt130ishx25sgb1agdu8lj.tgz\"))\n  ## tar -xf file_name.tar.gz --directory /target/directory\n}\nsystem(glue(\"tar xvf ~/Downloads/analysis_population_structure.tgz --directory ~/Downloads/\")) \n\nThe following code is loading a function in gist.github.com/38431b74c6c0bf90c12f devtools::source_gist(\"38431b74c6c0bf90c12f\")\n\nwork.dir =\"~/Downloads/analysis_population_structure/\"\n\ndevtools::source_gist(\"38431b74c6c0bf90c12f\")\n\nℹ Sourcing gist \"38431b74c6c0bf90c12f\"\nℹ SHA-1 hash of file is \"cbeca7fd9bf1602dee41c4f1880cc3a5e8992303\"\n\n\n\npopinfo = read_tsv(paste0(work.dir,\"relationships_w_pops_051208.txt\"))\n\nRows: 1301 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (5): FID, IID, dad, mom, population\ndbl (2): sex, pheno\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\npopinfo %&gt;% count(population)\n\n# A tibble: 11 × 2\n   population     n\n   &lt;chr&gt;      &lt;int&gt;\n 1 ASW           90\n 2 CEU          180\n 3 CHB           90\n 4 CHD          100\n 5 GIH          100\n 6 JPT           91\n 7 LWK          100\n 8 MEX           90\n 9 MKK          180\n10 TSI          100\n11 YRI          180\n\n\n\nsamdata = read_tsv(paste0(work.dir,\"phase3_corrected.psam\"),guess_max = 2500) \n\nRows: 2504 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (5): #IID, PAT, MAT, SuperPop, Population\ndbl (1): SEX\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nspec(samdata)\n\ncols(\n  `#IID` = col_character(),\n  PAT = col_character(),\n  MAT = col_character(),\n  SEX = col_double(),\n  SuperPop = col_character(),\n  Population = col_character()\n)\n\n\n\nsuperpop = samdata %&gt;% select(SuperPop,Population) %&gt;% unique()\nsuperpop = rbind(superpop, data.frame(SuperPop=c(\"EAS\",\"HIS\",\"AFR\"),Population=c(\"CHD\",\"MEX\",\"MKK\")))\n\n\nif(!file.exists(glue::glue(\"{work.dir}output/allhwe.hwe\")))\nsystem(glue::glue(\"~/bin/plink --bfile {work.dir}hapmapch22 --hardy --out {work.dir}output/allhwe\"))\nallhwe = read.table(glue::glue(\"{work.dir}output/allhwe.hwe\"),header=TRUE,as.is=TRUE)\nhist(allhwe$P)\n\n\n\n\n\nqqunif(allhwe$P,main='HWE HapMap3 All Pop')\n\nWarning in qqunif(allhwe$P, main = \"HWE HapMap3 All Pop\"): thresholding p to\n1e-30\n\n\n\n\n\n\npop = \"CHB\"\npop = \"CEU\"\npop = \"YRI\"\nfor(pop in c(\"CHB\",\"CEU\",\"YRI\"))\n{\n  ## what if we calculate with single population?\n  popinfo %&gt;% filter(population==pop) %&gt;%\n    write_tsv(path=glue::glue(\"{work.dir}{pop}.fam\") )\n  if(!file.exists(glue::glue(\"{work.dir}output/hwe-{pop}.hwe\")))\n  system(glue::glue(\"~/bin/plink --bfile {work.dir}hapmapch22 --hardy --keep {work.dir}{pop}.fam --out {work.dir}output/hwe-{pop}\"))\n  pophwe = read.table(glue::glue(\"{work.dir}output/hwe-{pop}.hwe\"),header=TRUE,as.is=TRUE)\n  hist(pophwe$P,main=glue::glue(\"HWE {pop} and founders only\"))\n  qqunif(pophwe$P,main=glue::glue(\"HWE {pop} and founders only\"))\n}\n\nWarning: The `path` argument of `write_tsv()` is deprecated as of readr 1.4.0.\nℹ Please use the `file` argument instead.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nigrowth = read_tsv(\"https://raw.githubusercontent.com/hakyimlab/igrowth/master/rawgrowth.txt\")\n\nRows: 3726 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (3): IID, pop, serum\ndbl (4): sex, experim, meas.by, growth\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nspec(igrowth)\n\ncols(\n  IID = col_character(),\n  sex = col_double(),\n  pop = col_character(),\n  experim = col_double(),\n  meas.by = col_double(),\n  serum = col_character(),\n  growth = col_double()\n)\n\n\n\nigrowth = popinfo %&gt;% select(-pheno) %&gt;% inner_join(igrowth %&gt;% select(IID,growth), by=c(\"IID\"=\"IID\"))\nwrite_tsv(igrowth,path=glue::glue(\"{work.dir}igrowth.pheno\"))\nigrowth %&gt;% ggplot(aes(population,growth)) + geom_violin(aes(fill=population)) + geom_boxplot(width=0.2,col='black',fill='gray',alpha=.8) + theme_bw(base_size = 15)\n\nWarning: Removed 130 rows containing non-finite values (`stat_ydensity()`).\n\n\nWarning: Removed 130 rows containing non-finite values (`stat_boxplot()`).\n\n\n\n\n\n\nsummary( lm(growth~population,data=igrowth) )\n\n\nCall:\nlm(formula = growth ~ population, data = igrowth)\n\nResiduals:\n   Min     1Q Median     3Q    Max \n-58821 -18093  -2242  15896  98760 \n\nCoefficients:\n              Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)    73080.8      938.2  77.894  &lt; 2e-16 ***\npopulationCEU  -2190.1     1175.4  -1.863   0.0625 .  \npopulationCHB   9053.1     2043.9   4.429 9.73e-06 ***\npopulationJPT   3476.8     2034.8   1.709   0.0876 .  \npopulationYRI  -7985.2     1137.2  -7.022 2.61e-12 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 24160 on 3591 degrees of freedom\n  (130 observations deleted due to missingness)\nMultiple R-squared:  0.0345,    Adjusted R-squared:  0.03342 \nF-statistic: 32.08 on 4 and 3591 DF,  p-value: &lt; 2.2e-16\n\n\n\nif(!file.exists(glue::glue(\"{work.dir}output/igrowth.assoc.linear\")))\nsystem(glue::glue(\"~/bin/plink --bfile {work.dir}hapmapch22 --linear --pheno {work.dir}igrowth.pheno --pheno-name growth --maf 0.05 --out {work.dir}output/igrowth\"))\nigrowth.assoc = read.table(glue::glue(\"{work.dir}output/igrowth.assoc.linear\"),header=T,as.is=T)\nhist(igrowth.assoc$P)\n\n\n\n\n\nqqunif(igrowth.assoc$P)\n\n\n\n\n\nlibrary(qqman)\n\n\n\n\nFor example usage please run: vignette('qqman')\n\n\n\n\n\nCitation appreciated but not required:\n\n\nTurner, (2018). qqman: an R package for visualizing GWAS results using Q-Q and manhattan plots. Journal of Open Source Software, 3(25), 731, https://doi.org/10.21105/joss.00731.\n\n\n\n\nmanhattan(igrowth.assoc, chr=\"CHR\", bp=\"BP\", snp=\"SNP\", p=\"P\" )\n\n\n\n\n\n## generate PCs using plink\nif(!file.exists(glue::glue(\"{work.dir}output/pca.eigenvec\")))\nsystem(glue::glue(\"~/bin/plink --bfile {work.dir}hapmapch22 --pca --out {work.dir}output/pca\"))\n## read plink calculated PCs\npcplink = read.table(glue::glue(\"{work.dir}output/pca.eigenvec\"),header=F, as.is=T)\nnames(pcplink) = c(\"FID\",\"IID\",paste0(\"PC\", c(1:(ncol(pcplink)-2))) )\npcplink = popinfo %&gt;% left_join(superpop,by=c(\"population\"=\"Population\")) %&gt;% inner_join(pcplink, by=c(\"FID\"=\"FID\", \"IID\"=\"IID\"))\n## plot PC1 vs PC2\npcplink %&gt;% ggplot(aes(PC1,PC2,col=population,shape=SuperPop)) + geom_point(size=3,alpha=.7) + theme_bw(base_size = 15)\n\n\n\n\n\nif(!file.exists(glue::glue(\"{work.dir}output/igrowth-adjPC.assoc.linear\")))\nsystem(glue::glue(\"~/bin/plink --bfile {work.dir}hapmapch22 --linear --pheno {work.dir}igrowth.pheno --pheno-name growth --covar {work.dir}output/pca.eigenvec --covar-number 1-4 --hide-covar --maf 0.05 --out {work.dir}output/igrowth-adjPC\"))\nigrowth.adjusted.assoc = read.table(glue::glue(\"{work.dir}output/igrowth-adjPC.assoc.linear\"),header=T,as.is=T)\n##indadd = igrowth.adjusted.assoc$TEST==\"ADD\"\ntitulo = \"igrowh association adjusted for PCs\"\nhist(igrowth.adjusted.assoc$P,main=titulo)\n\n\n\n\n\nqqunif(igrowth.adjusted.assoc$P,main=titulo)"
  }
]