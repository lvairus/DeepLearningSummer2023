---
title: "Parsl Cheatsheet"
author: "Laura Vairus"
date: "07-07-2023"
---

### Imports

```{r eval=FALSE}
import parsl
from parsl.app.app import python_app, bash_app
```

### Making a python function parallelizable:

```{python eval=FALSE}

@python_app
def py_func(param):
  # import any packages you need
  # code 

# call function normally and it will be run async
my_func(param) 

```

### Making a bash function parallelizable

```{python eval=FALSE}

import parsl
from parsl.app.app import bash_app

@bash_app
def bash_func(stdout='path/output.stdout', stderr='path/error.stderr'):
    return 'bash code string'

# call function
bash_func().result()

# read the output file
with open('output-filename.stdout', 'r') as f:
     print(f.read())

```

### AppFutures

when you run apps that take a long time, instead of getting a variable for your return result, you get an appfuture variable, which holds information about the running code.

```{python eval=FALSE}

@python_app
def func ():
    # code

# assigning variable
app_future = func()

# boolean on whether the function is finished running or not
app_future.done()

# returns result, warning: calling this will make you wait until the function is finished
app_future.result()

# returns any exceptions raised during the app execution.
app_future.exception()

# attribute of appfuture, list of all DataFutures of function
app_future.outputs

```

### DataFutures

when you run apps that take a long time that return files, instead of getting the files for your results, you get datafutures, which can be accessed through your appfuture's attributes, and which contain information about the files you will receive.

```{python eval=FALSE}

#assigning variable
data_future1 = app_future[0]

# boolean on whether the data is available
data_future1.done()

# retrieves the data object (e.g., file path, value) when it becomes available.
data_future1.result()

# retrieves any exceptions raised during the data retrieval.
data_future1.exception()

# references the parent AppFuture object that produced the data.
data_future1.parent

```

### dataflowkernel

wip
